}
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test <- select(test, -name)
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test <- select(test, -name)
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test <- select(test, -eval(name))
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test[ , !(names(test) %in% name)]
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- c(colnames(test)[[i]])
test[ , !(names(test) %in% name)]
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- c(colnames(test)[[i]])
within(test, rm(name))
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- c(colnames(test)[[i]])
within(test, rm(name))
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- c(colnames(test)[[i]])
within(test, rm(name))
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
within(test, rm(name))
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
within(test, rm(colnames(test)[[i]]))
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
within(test, rm(colnames(test)[i]))
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer", colnames(test)[i])){
test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer", colnames(test)[i])){
print(colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(test)
test <- ff
todel<- c()
for(i in 1:ncol(test)){
if(grepl("cer", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(todel)
test <- ff
todel<- c()
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(todel)
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("ino.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("rus.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("seb.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("ser.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("tul.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
write.csv(test, "coalesce.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/home/tombom/Documents/uni/tesi/data/matrix")
library(tidyverse)
# Load the CSV and only get the columns we need
raw<-read.csv(file="7FamComplGBANClusterOtu.csv", stringsAsFactors = F)
# filter for the family we want
#families <-tolower(c("Ceratobasidiaceae", "Tulasnellaceae", "Inocybaceae", "Serendipitaceae", "Sebacinaceae", "Russulaceae", "Thelephoraeae"))
#filtRaw <-dplyr::filter(raw, Fun_family %in% families) %>%
#    dplyr::select("Orc_species", "otu", "lat", "lon")
filtRaw <- dplyr::select(raw, "Orc_species", "otu", "lat", "lon")
### If we want to have the otus
# Remove all rows without the otu (you shouldn't have any, but best to make sure)
funfam<- distinct(filtRaw)
View(funfam)
drop_na(otu) %>%
#remove rows without the family
dplyr::filter(!otu=="") %>%
#add presence column
add_column(Present=1) %>%
pivot_wider(names_from=otu, values_from=Present) %>%
replace(is.na(.), 0)
# Put the otus in alphabetical order while keeping Orc_species, lat and lon at the first positions
funfam <- funfam[,order(colnames(funfam))]
funfam <- relocate(funfam, Orc_species, lat, lon)
# Write the csv
write.csv(funfam, "7famPresAbs.csv", row.names = FALSE)
library(tidyverse)
setwd("/home/tombom/Documents/uni/tesi/data/milestone")
# Load the CSV and only get the columns we need
raw<-read.csv(file="7FamComplGBANClusterOtu.csv", stringsAsFactors = F)
filtRaw <- dplyr::select(raw, "Orc_species", "otu", "lat", "lon")
funfam<- distinct(filtRaw)
View(funfam)
drop_na(otu) %>%
#remove rows without the family
dplyr::filter(!otu=="") %>%
#add presence column
add_column(Present=1) %>%
pivot_wider(names_from=otu, values_from=Present) %>%
replace(is.na(.), 0)
knitr::opts_knit$set(root.dir = "/home/tombom/Documents/uni/tesi/data/milestone")
library(tidyverse)
# Load the CSV and only get the columns we need
raw<-read.csv(file="7FamComplGBANClusterOtu.csv", stringsAsFactors = F)
raw<-dplyr::select(raw, "Orc_species", "otu", "lat", "lon")
### If we want to have the otu
# Remove all rows without the otu (you shouldn't have any, but best to make sure)
funfam<- distinct(raw) %>%
drop_na(otu) %>%
#remove rows without the family
dplyr::filter(!otu=="") %>%
#add presence column
add_column(Present=1) %>%
pivot_wider(names_from=otu, values_from=Present) %>%
replace(is.na(.), 0)
write.csv(funfam, "7FamPresAbs.csv", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/uni/tesi/FunModels/data/cluster/")
library(tidyverse)
library(rentrez)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/uni/tesi/FunModels/data/cluster/")
library(tidyverse)
library(knitr)
library(tidyverse)
setwd("~/Documents/uni/tesi/data/cluster/")
# get the data
cluster<-read.csv("cluster.csv", stringsAsFactors = FALSE)
colnames(cluster)[2] <- "GBAN"
raw<-read.csv("../init/raw.csv", stringsAsFactors = FALSE)
# Remove rows without any data on the family
raw <-dplyr::filter(raw, Fun_family != "")
# merge the two datasets
otus <- merge(cluster, raw, by="GBAN")
# create a df with only a few columns
otusOnly <- select(otus, cluster, Fun_family)
# create a data frame of corrispondence between cluster and otus name
otusd <- distinct(otusOnly)
# create a correlation table
corrTable <- data.frame()
# get a correspondence table between OTU and family
for(f in unique(otusd$Fun_family)){
oneFam <- filter(otusd, Fun_family==f)
oneFam$ID <- 1:nrow(oneFam)
withOtu <- mutate(oneFam, otu=paste(substr(Fun_family, 1,3),ID, sep=""))
withOtu <- select(withOtu, -ID)
corrTable <- rbind(corrTable, withOtu)
}
otus$otu <- corrTable$otu[match(otus$cluster,corrTable$cluster)]
View(otus)
write.csv(otus, "otus.csv", row.names=F)
library(tidyverse)
setwd("~/Documents/uni/tesi/data/init/")
data <- read.csv("complete.csv")
data <- otusWithFas
setwd("~/Documents/uni/tesi/data/init/")
data <- read.csv("complete.csv")
data <- read.csv("complete.csv", sep="\t")
OMF<- tolower(c("Ceratobasidiaceae", "Tulasnellaceae", "Inocybaceae", "Serendipitaceae", "Sebacinaceae", "Russulaceae", "Thelephoraeae"))
data$Fun_family <- tolower(data$Fun_family)
raw <- dplyr::filter(data, Fun_family %in% OMF)
write.csv(raw, "raw.csv", row.names = F)
library(tidyverse)
setwd("~/Documents/uni/tesi/data/init/")
data <- read.csv("complete.csv", sep="\t")
OMF<- tolower(c("Ceratobasidiaceae", "Tulasnellaceae", "Inocybaceae", "Serendipitaceae", "Sebacinaceae", "Russulaceae", "Thelephoraceae"))
data$Fun_family <- tolower(data$Fun_family)
raw <- dplyr::filter(data, Fun_family %in% OMF)
write.csv(raw, "raw.csv", row.names = F)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/uni/tesi/data/init/")
library(rBLAST)
?rblast
?blast
install.packages("devtools")
install_github("mhahsler/rBLAST")
install.packages("remotes")
install_github("mhahsler/rBLAST")
library(remotes)
install_github("mhahsler/rBLAST")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/uni/tesi/data/init/")
library(rBLAST)
library(sp)
library(seqinr)
library(tidyverse)
library(rentrez)
library(BiocManager)
library(Biostrings)
# Load the data file.
raw <- read.csv("raw.csv", stringsAsFactors = FALSE)
### CREATE THE DATABASE
# We are going to pull from entrez the sequence for each genbank ID present in the data frame and add them to a fasta file. If the sequence is present already, is going to skip.
# get all the  unique genbank codes
codes <- unique(raw$GBAN)
#mostly for cosmetic reason during the output
TotCodes<-length(codes)
# TODO: addToFasta exception handling to run this script unsupervised. At the moment it stops, and has to be manually launched again. It starts where it left off though (kinda)
# Cosmetic reason, to give a nice output
# LOOP INSERTING INTO A DATA FRAME
# In case you are starting from scratch
#fasseq <- data.frame(GBAN="", FASTA="")
# If you already have a df
fasseq <- read.csv("CompleteGBANFAS.csv")
fasseq <- mutate_if(fasseq,is.factor, as.character)
x<-0
for (c in codes) {
# let's check we didn't already added the sequence. If it's not present, we'll add it
if (c %in%fasseq$GBAN){
x<-x+1
warning(paste(x, " on ", TotCodes, " done  ", c, " already present, skipping\n"))
}
else{
x<-x+1
# get the uid
r<-entrez_summary(db="nuccore", id=c)
# get the fasta for the corresponding uid
r_fasta <- entrez_fetch(db="nuccore", id=r$uid, rettype="fasta")
toAdd <- c(c, r_fasta)
# add it to the file
fasseq<-rbind(fasseq, toAdd)
warning(paste(x, " on ", TotCodes, " done  ", c, "added\n"))
# wait a few seconds to avoid an "API rate limit exceeded".
Sys.sleep(10)
}
}
# remove the .1 from the sequence name using some old school regex
seqCorrect <- mutate(fasseq, fas = gsub("^([^\\.]+)(\\.[0-9])", "\\1", FASTA)) %>% select(-FASTA)
codes <- unique(raw$GBAN)
TotCodes<-length(codes)
fasseq <- read.csv("CompleteGBANFAS.csv")
fasseq <- mutate_if(fasseq,is.factor, as.character)
x<-0
for (c in codes) {
# let's check we didn't already added the sequence. If it's not present, we'll add it
if (c %in%fasseq$GBAN){
x<-x+1
warning(paste(x, " on ", TotCodes, " done  ", c, " already present, skipping\n"))
}
else{
x<-x+1
# get the uid
r<-entrez_summary(db="nuccore", id=c)
# get the fasta for the corresponding uid
r_fasta <- entrez_fetch(db="nuccore", id=r$uid, rettype="fasta")
toAdd <- c(c, r_fasta)
# add it to the file
fasseq<-rbind(fasseq, toAdd)
warning(paste(x, " on ", TotCodes, " done  ", c, "added\n"))
# wait a few seconds to avoid an "API rate limit exceeded".
Sys.sleep(10)
}
}
length(codes)
raw <- read.csv("raw.csv", stringsAsFactors = FALSE)
codes <- unique(raw$GBAN)
length(codes)
codes <- unique(raw$GBAN)
TotCodes<-length(codes)
fasseq <- data.frame(GBAN="", FASTA="")
fasseq <- mutate_if(fasseq,is.factor, as.character)
x<-0
for (c in codes) {
# let's check we didn't already added the sequence. If it's not present, we'll add it
if (c %in%fasseq$GBAN){
x<-x+1
warning(paste(x, " on ", TotCodes, " done  ", c, " already present, skipping\n"))
}
else{
x<-x+1
# get the uid
r<-entrez_summary(db="nuccore", id=c)
# get the fasta for the corresponding uid
r_fasta <- entrez_fetch(db="nuccore", id=r$uid, rettype="fasta")
toAdd <- c(c, r_fasta)
# add it to the file
fasseq<-rbind(fasseq, toAdd)
warning(paste(x, " on ", TotCodes, " done  ", c, "added\n"))
# wait a few seconds to avoid an "API rate limit exceeded".
Sys.sleep(10)
}
}
seqCorrect <- mutate(fasseq, fas = gsub("^([^\\.]+)(\\.[0-9])", "\\1", FASTA)) %>% select(-FASTA)
write.csv(seqCorrect, "7fam.csv", row.names = F)
write(seqCorrect$fas, "7fam.fasta")
setwd("~/Computer/programmi/cd-hit")
# I'm running it with all default parameters except for the cutoff (-c) which is at 0.98
system("./cd-hit-est -i ~/Documents/uni/tesi/data/init/7fam.fasta -d 0 -o ~/Documents/tesi/data/cluster/data -c 0.98 -n 10 -l 11  -r 0 -G 1 -g 1 -b 20 -l 10 -s 0.0 -aL 0.0 -aS 0.0 -T 4 -M 32000")
# I'm running it with all default parameters except for the cutoff (-c) which is at 0.98
system("./cd-hit-est -i ~/Documents/uni/tesi/data/init/7fam.fasta -d 0 -o ~/Documents/tesi/data/cluster/data -c 0.98 -n 10 -l 11  -r 0 -G 1 -g 1 -b 20 -l 10 -s 0.0 -aL 0.0 -aS 0.0 -T 4 -M 32000")
# I'm running it with all default parameters except for the cutoff (-c) which is at 0.98
system("./cd-hit-est -i ~/tesi/data/init/7fam.fasta -d 0 -o ~/tesi/data/cluster/data -c 0.98 -n 10 -l 11  -r 0 -G 1 -g 1 -b 20 -l 10 -s 0.0 -aL 0.0 -aS 0.0 -T 4 -M 32000")
library(tidyverse)
library(stringr)
library(knitr)
setwd("~/tesi/data/cluster")
clstr <- read.csv("data.clstr", sep = "\t", row.names = NULL, header = FALSE, stringsAsFactors = FALSE)
clstr2 <- clstr
n = nrow(clstr)
x = 0
numbers_only <- function(x) !grepl("\\D", x)
for (row in c(1:n)) {
if (numbers_only(clstr2[row,1]) == TRUE) {
clstr2[row,1] <- x}
else {NULL}
x <- clstr2[row,1]
}
clstr.sums <- data.frame(dplyr::count(clstr2,V1))
kable(head(clstr.sums))
switch <- clstr.sums[1,2]
clstr3 <- cbind(clstr2[1], clstr)
colnames(clstr3)[1] <- "V0"
clstr4 <- select(clstr3, "V0", "V2")
clstr4 <- filter(clstr4, V2!="")
# Make sure you have "nt", otherwise substitute the string
clstr5 <- clstr4
clstr5[] <- lapply(clstr5, gsub, pattern='>', replacement='')
clstr5.2 <- data.frame(str_split_fixed(clstr5$V2, "nt, ", 2))
clstr5.3 <- data.frame(str_split_fixed(clstr5.2$X2, "... ", 2))
clstr6 <- cbind(clstr5[1],clstr5.2[1],clstr5.3[1:2])
colnames(clstr6) <- c("cluster","nt","gene","stat")
clstr6 <- select(clstr6, cluster, gene)
clstr6<-mutate_if(clstr6,is.factor, as.character)
write.csv(clstr6, "7FamCluster.csv", row.names = F)
clusterToRead <- "7FamCluster.csv"
library(seqinr)
library(tidyverse)
library(stringr)
library(knitr)
setwd("~/tesi/data/cluster")
clusterToRead <- "7FamCluster.csv"
rawPath <- "../init/filtered.csv"
outFile <- "otus.csv"
# get the data
cluster<-read.csv(clusterToRead, stringsAsFactors = FALSE)
colnames(cluster)[2] <- "GBAN"
raw<-read.csv(rawPath, stringsAsFactors = FALSE)
# Remove rows without any data on the family
raw <-dplyr::filter(raw,Fun_family != "")
# merge the two datasets
otus <- merge(cluster, raw, by="GBAN")
# create a df with only a few columns
otusOnly <- select(otus, cluster, Fun_family)
# create a data frame of corrispondence between cluster and otus name
otusd <- distinct(otusOnly)
# create a correlation table
corrTable <- data.frame()
# get a correspondence table between OTU and family
for(f in unique(otusd$Fun_family)){
oneFam <- filter(otusd, Fun_family==f)
oneFam$ID <- 1:nrow(oneFam)
withOtu <- mutate(oneFam, otu=paste(substr(Fun_family, 1,3),ID, sep=""))
withOtu <- select(withOtu, -ID)
corrTable <- rbind(corrTable, withOtu)
}
otus$otu <- corrTable$otu[match(otus$cluster,corrTable$cluster)]
write.csv(otus, outFile, row.names=F)
library(tidyverse)
setwd("tesi/data/cluster")
csvPath <- "otus.csv"
outPath <- "7famPresAbs.csv"
setwd("~/tesi/data/cluster")
csvPath <- "otus.csv"
outPath <- "7famPresAbs.csv"
# Load the CSV and only get the columns we need
raw<-read.csv(file=csvPath, stringsAsFactors = F)
filtRaw <- dplyr::select(raw, "Orc_species", "otu", "lat", "lon")
funfam<- distinct(filtRaw)
drop_na(otu) %>%
#remove rows without the family
dplyr::filter(!otu=="") %>%
#add presence column
add_column(Present=1) %>%
pivot_wider(names_from=otu, values_from=Present) %>%
replace(is.na(.), 0)
setwd("~/tesi/data/cluster")
csvPath <- "otus.csv"
outPath <- "7famPresAbs.csv"
# Load the CSV and only get the columns we need
raw<-read.csv(file=csvPath, stringsAsFactors = F)
filtRaw <- dplyr::select(raw, "Orc_species", "otu", "lat", "lon")
funfam<- distinct(filtRaw)
library(tidyverse)
setwd("~/tesi/data/cluster")
csvPath <- "otus.csv"
outPath <- "7famPresAbs.csv"
# Load the CSV and only get the columns we need
raw<-read.csv(file=csvPath, stringsAsFactors = F)
filtRaw <- dplyr::select(raw, "Orc_species", "otu", "lat", "lon")
funfam<- distinct(filtRaw) %>%
drop_na(otu) %>%
#remove rows without the family
dplyr::filter(!otu=="") %>%
#add presence column
add_column(Present=1) %>%
pivot_wider(names_from=otu, values_from=Present) %>%
replace(is.na(.), 0)
funfam <- funfam[,order(colnames(funfam))]
funfam <- relocate(funfam, Orc_species, lat, lon)
# Write the csv
write.csv(funfam, outPath, row.names = FALSE)
