knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/tesi/FunModels/data/matrix/")
library("jSDM")
library("tidyverse")
presAbsPath <- "lump.csv"
covPath <- "values.csv"   # matrix with covariates
data <- read.csv(presAbsPath)
data
data <- select(data, Orc_species, lat, lon, cer, tul,ino, ser, seb, rus,the)
data
data <- select(data, Orc_species, cer, tul,ino, ser, seb, rus,the)
data
envars <- select(data, N, P, K, pH, MacPrec, MinTemp)
raw <- read.csv(presAbsPath)
raw <- read.csv(presAbsPath)
data <- select(raw, Orc_species, cer, tul,ino, ser, seb, rus,the)
envars <- select(raw, N, P, K, pH, MacPrec, MinTemp)
envars <- select(raw, N, P, K, pH, MaxPrec, MinTemp)
envars
data <- select(raw, cer, tul,ino, ser, seb, rus,the)
?scale
scale(envars)
envars
envars <- scale(envars)
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
library("jSDM")
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
probit <- jSDM::jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
?jSDM_binomial_probit_block
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/tesi/FunModels/data/matrix/")
library("jSDM")
library("tidyverse")
presAbsPath <- "lump.csv"
covPath <- "values.csv"   # matrix with covariates
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
?jSDM
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
?jSDM
library(jSDM)
library("tidyverse")
presAbsPath <- "lump.csv"
covPath <- "values.csv"   # matrix with covariates
```{r}
raw <- read.csv(presAbsPath)
data <- select(raw, cer, tul,ino, ser, seb, rus,the)
envars <- select(raw, N, P, K, pH, MaxPrec, MinTemp)
envars <- scale(envars)
envars <- select(raw, N, P, K, pH, MaxPrec, MinTemp)
envars <- scale(envars)
```{r}
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
?jSDM
install.packages("HMSC")
install.packages("Hmsc")
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
library(vegan)
library(tidyverse)
library(psych)
library(dplyr)
library(caret)
library(ggbiplot)
library(viridis)
library(tibble)
library(factoextra)
a <- pc$rotation
a %>% as.data.frame %>% rownames_to_column %>%
select(rowname, PC1, PC2) %>% arrange(desc(PC1)) %>% head(10)
setwd("~/tesi/FunModels/data/misc/")
dataPath <- "envVarWithFamilies.csv"
outTitle=""
data <- read.csv(dataPath)
data <- drop_na(data)
datapc <- select(data, -family)
pc <- prcomp(datapc,center = T,scale. = T)
# Compute the variance
pr_var <- pc$sdev^2
prop_varex <- pr_var/sum(pr_var)
plot(prop_varex, col="#069a2e", main="Varianza spiegata", type='b', ylab = "Percentuale di varianza spiegata", xlab="Componente principale")
# Plot with points only
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = FALSE, circle = FALSE,ellipse.prob = 0.68) +
geom_point()+
theme(legend.direction = 'horizontal', legend.position = 'none')+
ggtitle(outTitle)
# Plot with legend and colored by fungus family
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = FALSE, circle = FALSE,ellipse.prob = 0.68) +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = TRUE, circle = FALSE,ellipse.prob = 0.68) +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
a <- pc$rotation
a %>% as.data.frame %>% rownames_to_column %>%
select(rowname, PC1, PC2) %>% arrange(desc(PC1)) %>% head(10)
# Plot with legend and colored by fungus family
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = FALSE, circle = FALSE,ellipse.prob = 0.68, var.axes=F) +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = TRUE, circle = FALSE,ellipse.prob = 0.68, var.axes=F) +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
fviz_cluster(res.km, data = df[, -5],
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
set.seed(123)
res.km <- kmeans(scale(data[, -7]), 7, nstart = 25)
fviz_cluster(res.km, data = df[, -5],
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
data
class(data)
# K-mean
data[, -7]
res.km <- kmeans(scale(data[, -7]), 3, nstart = 25)
fviz_cluster(res.km, data = data[, -7],
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
set.seed(123)
res.km <- kmeans(scale(data[, -7]), 7, nstart = 25)
fviz_cluster(res.km, data = data[, -7],
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
library(ggpubr)
ind.coord <- as.data.frame(get_pca_ind(pc)$coord)
# Add clusters obtained using the K-means algorithm
ind.coord$cluster <- factor(res.km$cluster)
# Add Species groups from the original data sett
ind.coord$Species <- data$family
# Data inspection
head(ind.coord)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Species", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
eigenvalue <- round(get_eigenvalue(pc), 1)
variance.percent <- eigenvalue$variance.percent
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Species", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
# Plot with points only
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = FALSE, circle = FALSE,ellipse.prob = 0.68) +
geom_point()+
theme(legend.direction = 'horizontal', legend.position = 'none')+
ggtitle(outTitle)
# Plot with legend and colored by fungus family
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = FALSE, circle = FALSE,ellipse.prob = 0.68, var.axes=F) +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = TRUE, circle = FALSE,ellipse.prob = 0.68, var.axes=F) +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
a <- pc$rotation
a %>% as.data.frame %>% rownames_to_column %>%
select(rowname, PC1, PC2) %>% arrange(desc(PC1)) %>% head(10)
# Plot with legend and colored by fungus family
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = FALSE, circle = T,ellipse.prob = 0.68, var.axes=F) +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
# Plot with points only
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = FALSE, circle = T,ellipse.prob = 0.68) +
geom_point()+
theme(legend.direction = 'horizontal', legend.position = 'none')+
ggtitle(outTitle)
# Plot with points only
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = FALSE, circle = F,ellipse.prob = 0.68) +
geom_point()+
theme(legend.direction = 'horizontal', legend.position = 'none')+
ggtitle(outTitle)
# Plot with legend and colored by fungus family
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = FALSE, circle = T,ellipse.prob = 0.68, var.axes=F) +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$family, ellipse = TRUE, circle = FALSE,ellipse.prob = 0.68, var.axes=F) +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
a <- pc$rotation
a %>% as.data.frame %>% rownames_to_column %>%
select(rowname, PC1, PC2) %>% arrange(desc(PC1)) %>% head(10)
fviz_contrib(pc,
choice = "var",
axes = 5,
top = 10, color = 'darkorange3', barfill  = 'blue4',fill ='blue4')
fviz_contrib(pc,
choice = "var",
axes = 3,
top = 10, color = 'darkorange3', barfill  = 'blue4',fill ='blue4')
fviz_contrib(pc,
choice = "var",
axes = 2,
top = 10, color = 'darkorange3', barfill  = 'blue4',fill ='blue4')
fviz_contrib(pc,
choice = "var",
axes = 2,
top = 10, color = 'darkorange3', barfill  = 'blue4',fill ='blue4')
fviz_screeplot(pc, ncp=6,linecolor = "#069a2e", barfill  = "#069a2e",
barcolor ='black', xlab = "Dimensioni",
ylab = '% varianza',
main = 'Riduzione dei componenti')
fviz_screeplot(pc, ncp=6,linecolor = "black", barfill  = "#069a2e",
barcolor ='black', xlab = "Dimensioni",
ylab = '% varianza',
main = 'Riduzione dei componenti')
a <- pc$rotation
a %>% as.data.frame %>% rownames_to_column %>%
select(rowname, PC1, PC2) %>% arrange(desc(PC1)) %>% head(10)
fviz_contrib(pc,
choice = "var",
axes = 2,
top = 10, color = 'darkorange3', barfill  = 'blue4',fill ='blue4')
fviz_contrib(pc,
choice = "var",
axes = 1,
top = 10, color = 'darkorange3', barfill  = 'blue4',fill ='blue4',
main = "contributi delle variabili")
fviz_contrib(pc,
choice = "var",
axes = 1,
top = 10, color = 'darkorange3', barfill  = 'blue4',fill ='blue4',
main = "contributi delle variabili")
f <- fviz_contrib(pc,
choice = "var",
axes = 1,
top = 10, color = 'darkorange3', barfill  = 'blue4',fill ='blue4')
ggpar(f, main = "Contributi delle variabili alla PC1")
ggpar(f, main = "Contributi delle variabili alla PC1")
f <- fviz_contrib(pc,
choice = "var",
axes = 1,
top = 10, color = 'darkorange3', barfill  = '#069a2e',fill ='#069a2e')
f <- fviz_contrib(pc,
choice = "var",
axes = 1,
top = 10, color = 'darkorange3', barfill  = '#069a2e',fill ='#069a2e')
f <- fviz_contrib(pc,
choice = "var",
axes = 1,
top = 10, color = '#069a2e', barfill  = '#069a2e',fill ='#069a2e')
ggpar(f, main = "Contributi delle variabili alla PC1")
ggpar(f, main = "Contributi delle variabili alla PC1", ylab = "Contributo (%)")
f <- fviz_contrib(pc,
choice = "var",
axes = 2,
top = 10, color = '#069a2e', barfill  = '#069a2e',fill ='#069a2e')
ggpar(f, main = "Contributi delle variabili alla PC1", ylab = "Contributo (%)")
ggpar(f, main = "Contributi delle variabili alla PC2", ylab = "Contributo (%)")
set.seed(123)
res.km <- kmeans(scale(data[, -7]), 7, nstart = 25)
fviz_cluster(res.km, data = data[, -7],
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
ind.coord <- as.data.frame(get_pca_ind(pc)$coord)
# Add clusters obtained using the K-means algorithm
ind.coord$cluster <- factor(res.km$cluster)
# Add Species groups from the original data sett
ind.coord$Species <- data$family
# Data inspection
head(ind.coord)
eigenvalue <- round(get_eigenvalue(pc), 1)
variance.percent <- eigenvalue$variance.percent
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Species", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
