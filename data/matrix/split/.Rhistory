library(vegan)
library(tidyverse)
library(psych)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/tesi/FunModels/data/matrix/split/")
dataPath <- "rus.csv"
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
dataDist <- na.omit(dataDist)
pc <- prcomp(dataDist,center = T,scale. = T)
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
dataDist <- na.omit(dataDist)
pc <- prcomp(dataDist,center = T,scale. = F)
summary(pc)
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
library(vegan)
library(tidyverse)
library(psych)
library(ggbiplot)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/tesi/FunModels/data/matrix/split/")
dataPath <- "rus.csv"
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
dataDist <- na.omit(dataDist)
pc <- prcomp(dataDist,center = T,scale. = F)
summary(pc)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
dataDist <- na.omit(dataDist)
pc <- prcomp(dataDist,center = T,scale. = F)
summary(pc)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$Species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
dataDist <- na.omit(dataDist)
pc <- prcomp(dataDist,center = T,scale. = F)
summary(pc)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = data$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
data <- read.csv(dataPath)
datagrp <- select(data, -c("lat","lon","population"))  %>%
na.omit()
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
dataDist <- na.omit(dataDist)
pc <- prcomp(dataDist,center = T,scale. = F)
summary(pc)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = datagrp$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
datagrp
data <- read.csv(dataPath)
datagrp <- select(data, -c("lat","lon","population"))  %>%
na.omit()
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
dataDist <- na.omit(dataDist)
# remove columns without variance
dataDist <- dataDist[,apply(dataDist, 2, var, na.rm=TRUE) != 0]
pc <- prcomp(dataDist,center = T,scale. = F)
summary(pc)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = datagrp$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
library(caret)
install.packages("caret")
library(caret)
pred <- predict(pc,datagrp)
train_1 <- data.frame(pred,train[5])
pred <- predict(pc,dataDist)
train_1 <- data.frame(pred,train[5])
train <- dataDist
pred <- predict(pc,train)
train_1 <- data.frame(pred,train[5])
pred1 <- predict(pc,test)
data <- read.csv(dataPath)
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/tesi/FunModels/data/matrix/split/")
dataPath <- "rus.csv"
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","Orc_species", "population")) %>%
na.omit()
# remove columns without variance
dataDist <- dataDist[,apply(dataDist, 2, var, na.rm=TRUE) != 0]
# partition the data set into training and testing data sets.
ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
dataDist$Orc_species
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
dataDist <- dataDist[,apply(dataDist, 2, var, na.rm=TRUE) != 0]
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
dataDist <- dataDist[,apply(dataDist, 2, var, na.rm=TRUE) != 0]
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
dataDist <- dataDist[,apply(dataDist, 2, var, na.rm=TRUE) != 0]
# partition the data set into training and testing data sets.
ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
train <- iris[ind,]
test <- iris[-ind,]
pc <- prcomp(train[,-5],center = T,scale. = T)
pc
summary(pc)
png("rus.png")
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
dataDist <- dataDist[,apply(dataDist, 2, var, na.rm=TRUE) != 0]
# partition the data set into training and testing data sets.
ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
train <- dataDist[ind,]
test <- dataDist[-ind,]
pc <- prcomp(train[,-5],center = T,scale. = T)
train
train[,-1]
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
dataDist <- dataDist[,apply(dataDist, 2, var, na.rm=TRUE) != 0]
# partition the data set into training and testing data sets.
ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
train <- dataDist[ind,]
test <- dataDist[-ind,]
pc <- prcomp(train[,-1],center = T,scale. = T)
pc <- prcomp(train[,-1],center = T,scale. = F)
pc
summary(pc)
png("rus.png")
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
dataDist <- dataDist[,apply(dataDist, 2, var, na.rm=TRUE) != 0]
library("jsdm")
library("jSDM")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/tesi/FunModels/data/matrix/")
library("jSDM")
library("tidyverse")
presAbsPath <- "lump.csv"
covPath <- "values.csv"   # matrix with covariates
data <- read.csv(presAbsPath)
data
data <- select(data, Orc_species, lat, lon, cer, tul,ino, ser, seb, rus,the)
data
data <- select(data, Orc_species, cer, tul,ino, ser, seb, rus,the)
data
envars <- select(data, N, P, K, pH, MacPrec, MinTemp)
raw <- read.csv(presAbsPath)
raw <- read.csv(presAbsPath)
data <- select(raw, Orc_species, cer, tul,ino, ser, seb, rus,the)
envars <- select(raw, N, P, K, pH, MacPrec, MinTemp)
envars <- select(raw, N, P, K, pH, MaxPrec, MinTemp)
envars
data <- select(raw, cer, tul,ino, ser, seb, rus,the)
?scale
scale(envars)
envars
envars <- scale(envars)
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
library("jSDM")
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
probit <- jSDM::jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
?jSDM_binomial_probit_block
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/tesi/FunModels/data/matrix/")
library("jSDM")
library("tidyverse")
presAbsPath <- "lump.csv"
covPath <- "values.csv"   # matrix with covariates
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
?jSDM
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
?jSDM
library(jSDM)
library("tidyverse")
presAbsPath <- "lump.csv"
covPath <- "values.csv"   # matrix with covariates
```{r}
raw <- read.csv(presAbsPath)
data <- select(raw, cer, tul,ino, ser, seb, rus,the)
envars <- select(raw, N, P, K, pH, MaxPrec, MinTemp)
envars <- scale(envars)
envars <- select(raw, N, P, K, pH, MaxPrec, MinTemp)
envars <- scale(envars)
```{r}
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
?jSDM
install.packages("HMSC")
install.packages("Hmsc")
probit <- jSDM_binomial_probit_block(
# Chains
burnin=1000, mcmc=1000, thin=1,
# Response variable
presence_site_sp = data,
# Explanatory variables
site_suitability = ~.,
site_data = envars,
# Model specification
n_latent=2, site_effect="random",
# Starting values
alpha_start=0, beta_start=0,
lambda_start=0, W_start=0,
V_alpha=1,
# Priors
shape=0.1, rate=0.1,
mu_beta=0, V_beta=10,
mu_lambda=0, V_lambda=10,
# Various
seed=1234, verbose=1)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split")
dataPath <- "ino.csv"
outTitle="Inocybaceae"
name <- substr(dataPath, 1,3)
plotOut <- paste(name, ".png", sep="")
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
train <- dataDist
pc <- princomp(train[,-1],center = T,scale = T)
dataPath <- "cer.csv"
setwd("~/tesi/FunModels/data/matrix/split")
dataPath <- "cer.csv"
outTitle="Inocybaceae"
name <- substr(dataPath, 1,3)
plotOut <- paste(name, ".png", sep="")
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
train <- dataDist
pc <- princomp(train[,-1],center = T,scale = T)
#pc <- prcomp(train[,-1],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
