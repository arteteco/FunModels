library(vegan)
library(tidyverse)
setwd("~/tesi/FunModels/data/misc/")
dataPath <- "envVarWithFamilies.csv"
#outPath <- "lump.jpg" # output graph
outTitle <- ""
data <- read.csv(dataPath)
data <- drop_na(data)
grp <-data$family
data <- select(data, -family)
dataMDS <-
metaMDS(data,
distance = "euclidean",
k = 3,
maxit = 999,
trymax = 500,
na.rm=T)
dataMDS
stressplot(dataMDS)
datascores <- as.data.frame(scores(dataMDS))
scores <- cbind(as.data.frame(datascores), grp = grp)
centroids <- aggregate(cbind(NMDS1, NMDS2) ~ grp, data = scores, FUN = mean)
seg <- merge(scores, setNames(centroids, c('grp','oNMDS1','oNMDS2')),
by = 'grp', sort = FALSE)
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = grp)) +
#geom_segment(data = seg,
#             mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
#geom_path(size=1, linetype=1)+
stat_ellipse()
theme(legend.position="right",legend.text=element_text(size=10),legend.direction='vertical')+
ggtitle(outTitle)
data
data <- read.csv(dataPath)
data <- drop_na(data)
grp <-data$family
data
grp
data <- read.csv(dataPath)
data <- drop_na(data)
data <- transmute(data,
family = case_when(
family == "cer" ~ "Ceratobasidiaceae")
)
data <- transmute(data,
family = case_when(
family == "cer" ~ "Ceratobasidiaceae")
))
data <- transmute(data,
family = case_when(
family == "cer" ~ "Ceratobasidiaceae")
))
data <- transmute(data,
family = case_when(
family == "cer" ~ "Ceratobasidiaceae"))
data
data <- read.csv(dataPath)
data <- drop_na(data)
data <- transmute(data,
family = case_when(
family == "cer" ~ "Ceratobasidiaceae"))
data
data <- read.csv(dataPath)
data <- drop_na(data)
data <- transmute(data,
family = case_when(
family == "cer" ~ "Ceratobasidiaceae",
family == "rus" ~ "Russulaceae",
family == "ino" ~ "Inocybaceae",
family == "seb" ~ "Sebacinaceae",
family == "ser" ~ "Serendipitaceae",
family == "the" ~ "Theleophoraceae",
family == "tul" ~ "Tulasnellaceae"))
data
grp <-data$family
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = grp)) +
#geom_segment(data = seg,
#             mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
#geom_path(size=1, linetype=1)+
stat_ellipse()
grp <-data$family
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = grp)) +
#geom_segment(data = seg,
#             mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
#geom_path(size=1, linetype=1)+
stat_ellipse()
grp
datascores <- as.data.frame(scores(dataMDS))
scores <- cbind(as.data.frame(datascores), grp = grp)
centroids <- aggregate(cbind(NMDS1, NMDS2) ~ grp, data = scores, FUN = mean)
seg <- merge(scores, setNames(centroids, c('grp','oNMDS1','oNMDS2')),
by = 'grp', sort = FALSE)
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = grp)) +
#geom_segment(data = seg,
#             mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
#geom_path(size=1, linetype=1)+
stat_ellipse()
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = grp)) +
#geom_segment(data = seg,
#             mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
#geom_path(size=1, linetype=1)+
stat_ellipse()+
theme(legend. title = element_blank())
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = grp)) +
#geom_segment(data = seg,
#             mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
#geom_path(size=1, linetype=1)+
stat_ellipse()+
theme(legend.title = element_blank())
?plotVariancePartitioning()
# SETUP
library(Hmsc)
library(corrplot)
?plotVariancePartitioning()
plotVariancePartitioning(hM=m1, VP=VP,cols = mycols,
args.leg=list(bg="white",cex=0.25),
cex.main=0.25, xlab="OTUs")
# SETUP
library(Hmsc)
library(corrplot)
library(tidyverse)
library(snow)
setwd("~/tesi/FunModels/data/matrix/noSingle")
fileName <- "Hmsc500.RData"
envTitle <-"All families"
corrTitle <-envTitle
betaOut <- "HMSC_Beta_total.csv"
load(fileName)
#Gelman diagnostics are useful for model fit - the intercept for each variable. We are looking for point estimates near 1.
mpost = convertToCodaObject(m1)
gelman.diag(mpost$Beta, multivariate = FALSE, autoburnin = FALSE)$psrf
summary(mpost$Beta)
effectiveSize(mpost$Beta)
es.beta = effectiveSize(mpost$Beta)
#extract beta values
mbeta = getPostEstimate(m1, "Beta")
mbeta
write.csv(mbeta, file = betaOut)
#a cool way to look at how each environmental variable affects each OMF group
postBeta = getPostEstimate(m1, parName = "Beta")
plotBeta(m1, post = postBeta, param = "Support" , supportLevel = 0.85, split = 0.5, mar = c(6, 1, 2, 1), spNamesNumbers = c(T,F), main=envTitle)
OmegaCor = computeAssociations(m1)
supportLevel = 0.85
#to plot the result, we use this script. You can save the image as a png or pdf (better) in RStudio
par(mfrow = c(1,1))
plotOrder = 1:m1$ns
toPlot = ((OmegaCor[[1]]$support>supportLevel) + (OmegaCor[[1]]$support<(1-supportLevel))>0)*OmegaCor[[1]]$mean
rownames(toPlot)=colnames(toPlot)=gsub("_"," ",rownames(toPlot))
corrplot(toPlot[plotOrder,plotOrder], type="lower", tl.cex=.7, tl.col="black",tl.srt=45, method = "color", col=colorRampPalette(c("blue3","white","red3"))(200), title=corrTitle, cl.cex=.7, mar=c(0,0,1,0))
#save the data as a csv file
write.csv(OmegaCor, file = "HMSC_OmegaCor_total.csv")
#how is variance partitioned for each OTU
VP = computeVariancePartitioning(m1)
vals = VP$vals
mycols = rainbow(nrow(VP$vals))
par(xpd = T)
plotVariancePartitioning(hM=m1, VP=VP,cols = mycols,
args.leg=list(bg="white",cex=0.25),
cex.main=0.25, xlab="OTUs")
plotVariancePartitioning(hM=m1, VP=VP,cols = mycols,
args.leg=list(bg="white",cex=0.25),
cex.main=0.25, xlab="OTUs")
plotVariancePartitioning(hM=m1, VP=VP,cols = mycols,
args.leg=list(bg="white",cex=0.25),
cex.main=0.25)
plotVariancePartitioning(hM=m1, VP=VP,cols = mycols,
args.leg=list(bg="white",cex=0.25),
cex.main=0.25, legend.text = NULL)
plotVariancePartitioning(hM=m1, VP=VP,cols = mycols,
args.leg=list(bg="white",cex=0.25),
cex.main=0.25, legend.text = NULL, main=NULL)
