for(c in lista){
tmp <- matr %>%
mutate(!!c := rowSums(select(., starts_with(c))))
for(i in 1:nrow(tmp)){
if(tmp[i, ncol(tmp)] > 0){
tmp[i, ncol(tmp)] <- 1
}
}
for(i in 1:ncol(tmp)){
if(colnames(tmp)[i] %in% c && nchar(colnames(tmp)[i]) > 3){
tmp[, i := NULL]
}
}
ff <- merge(ff, tmp, all=T)
}
View(ff)
for(i in 1:ncol(ff)){
if(colnames(ff)[i] %in% "cer" && nchar(colnames(ff)[i]) > 3){
ff[, i := NULL]
}
}
View(ff)
for(i in 1:ncol(ff)){
if(colnames(ff)[i] starts_with("cer") && nchar(colnames(ff)[i]) > 3){
for(i in 1:ncol(ff)){
if(colnames(ff)[i] grepl("cer") & nchar(colnames(ff)[i]) > 3){
for(i in 1:ncol(ff)){
if(colnames(ff)[i] %in% "cer" & nchar(colnames(ff)[i]) > 3){
ff[, i := NULL]
}
}
View(ff)
for(i in 1:ncol(ff)){
if(colnames(ff)[i] %in% "cer"){
ff[, i := NULL]
}
}
for(i in 1:ncol(ff)){
if(colnames(ff)[i] %in% "cer"){
ff[, i] <- NULL
}
}
View(ff)
for(i in 1:ncol(ff)){
if(colnames(ff)[i] %in% "cer1"){
ff[, i] <- NULL
}
}
View(ff)
for(c in lista){
tmp <- matr %>%
mutate(!!c := rowSums(select(., starts_with(c))))
for(i in 1:nrow(tmp)){
if(tmp[i, ncol(tmp)] > 0){
tmp[i, ncol(tmp)] <- 1
}
}
for(i in 1:ncol(tmp)){
if(str_contains(colnames(tmp)[i], c) && nchar(colnames(tmp)[i]) > 3){
tmp[, i := NULL]
}
}
ff <- merge(ff, tmp, all=T)
}
for(c in lista){
tmp <- matr %>%
mutate(!!c := rowSums(select(., starts_with(c))))
for(i in 1:nrow(tmp)){
if(tmp[i, ncol(tmp)] > 0){
tmp[i, ncol(tmp)] <- 1
}
}
for(i in 1:ncol(tmp)){
if(contains(colnames(tmp)[i], c) && nchar(colnames(tmp)[i]) > 3){
tmp[, i := NULL]
}
}
ff <- merge(ff, tmp, all=T)
}
?grepl
for(i in 1:ncol(ff)){
if(grep("cer./*", colnames(ff)[i])){
ff[, i] <- NULL
}
}
for(i in 1:ncol(ff)){
if(grep("cer", colnames(ff)[i])){
ff[, i] <- NULL
}
}
for(i in 1:ncol(ff)){
if(grep("cer", colnames(ff)[i])){
ff[, i] <- NULL
}
}
for(i in 1:ncol(ff)){
if(grepl("cer", colnames(ff)[i])){
ff[, i] <- NULL
}
}
View(ff)
ff <- matr
for(c in lista){
tmp <- matr %>%
mutate(!!c := rowSums(select(., starts_with(c))))
for(i in 1:nrow(tmp)){
if(tmp[i, ncol(tmp)] > 0){
tmp[i, ncol(tmp)] <- 1
}
}
ff <- merge(ff, tmp, all=T)
}
test <- ff
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer./*", colnames(test)[i])){
test[, i] <- NULL
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
test[, i] <- NULL
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
test[, i] <- NULL
}
}
View(test)
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
print(test[, i])
}
}
ncol(test)
print(colnames(test)[1])
print(colnames(test)[2])
print(colnames(test)[3])
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
print(colnames(test)[i])
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
print(colnames(test)[i])
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
subset(test, -select=colnames(test)[i])
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
subset(test, select=-colnames(test)[i])
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[i]
test <- subset(test, select = - name)
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test <- subset(test, select = - name)
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test <- subset(test, select = - c(name))
}
}
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test <- select(test, -name)
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test <- select(test, -name)
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test <- select(test, -eval(name))
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
test[ , !(names(test) %in% name)]
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- c(colnames(test)[[i]])
test[ , !(names(test) %in% name)]
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- c(colnames(test)[[i]])
within(test, rm(name))
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- c(colnames(test)[[i]])
within(test, rm(name))
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- c(colnames(test)[[i]])
within(test, rm(name))
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
name <- colnames(test)[[i]]
within(test, rm(name))
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
within(test, rm(colnames(test)[[i]]))
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
within(test, rm(colnames(test)[i]))
}
}
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer", colnames(test)[i])){
test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("cer", colnames(test)[i])){
print(colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(test)
test <- ff
todel<- c()
for(i in 1:ncol(test)){
if(grepl("cer", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(todel)
test <- ff
todel<- c()
for(i in 1:ncol(test)){
if(grepl("cer.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
View(todel)
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("ino.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("rus.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("seb.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("ser.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
test <- ff
for(i in 1:ncol(test)){
if(grepl("tul.", colnames(test)[i])){
todel <- c(todel, colnames(test)[i])
#test[ , !colnames(test) %in% colnames(test)[i]]
}
}
test <- select(test, -todel)
View(test)
write.csv(test, "coalesce.csv")
# setup
library(tidyverse)
setwd("~/tesi/FunModels/data/matrix")
matrPath <- "values.csv"
matr <- read.csv(matrPath)
# To assign a unique name to rows alphabetically
letterwrap <- function(n, depth = 1) {
args <- lapply(1:depth, FUN = function(x) return(letters))
x <- do.call(expand.grid, args = list(args, stringsAsFactors = F))
x <- x[, rev(names(x)), drop = F]
x <- do.call(paste0, x)
if (n <= length(x)) return(x[1:n])
return(c(x, letterwrap(n - length(x), depth = depth + 1)))
}
# Add a column population with the letters
matrLett <- letterwrap(nrow(matr))
matr$population <- matrLett
lista<- tolower(c("cer", "tul", "ino", "ser", "seb", "rus", "the"))
for(c in lista){
# create the new column and make it a sum of the row for that family
tmp <- matr %>%
mutate(!!c := rowSums(select(., starts_with(c))))
# substitute with 0 or 1
for(i in 1:nrow(tmp)){
if(tmp[i, ncol(tmp)] > 0){
tmp[i, ncol(tmp)] <- 1
}
}
ff <- merge(ff, tmp, all=T)
}
View(ff)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/tesi/FunModels/data/matrix")
library(tidyverse)
matr <- read.csv("values.csv")
# To assign a unique name to rows alphabetically
letterwrap <- function(n, depth = 1) {
args <- lapply(1:depth, FUN = function(x) return(letters))
x <- do.call(expand.grid, args = list(args, stringsAsFactors = F))
x <- x[, rev(names(x)), drop = F]
x <- do.call(paste0, x)
if (n <= length(x)) return(x[1:n])
return(c(x, letterwrap(n - length(x), depth = depth + 1)))
}
# Add a column population with the letters
matrLett <- letterwrap(nrow(matr))
matr$population <- matrLett
# split the matrix
lista<- tolower(c("cer", "tul", "ino", "ser", "seb", "rus", "the"))
for (f in lista){
kick <- subset(lista, !(lista == f))
NMatr <- select(matr, !starts_with(kick))
# Remove all rows where there is just 0 for the presence of that family, ie, no recorded presence
NMatr <- NMatr %>%
dplyr::mutate(sumVar = rowSums(dplyr::select(., contains(f))))%>%
filter(sumVar>0) %>%
select(-sumVar)
# assign the variable
assign(f, NMatr)
write.csv(x=NMatr, file=paste("split/", f, ".csv", sep=""), row.names=FALSE)
}
ff <- matr
lista<- tolower(c("cer", "tul", "ino", "ser", "seb", "rus", "the"))
# here we are creating a new column with a value 0-1 if that family is present in that site
for(c in lista){
# create the new column and make it a sum of the row for that family
tmp <- matr %>%
mutate(!!c := rowSums(select(., starts_with(c))))
# substitute with 0 or 1
for(i in 1:nrow(tmp)){
if(tmp[i, ncol(tmp)] > 0){
tmp[i, ncol(tmp)] <- 1
}
}
ff <- merge(ff, tmp, all=T)
}
View(ff)
# setup
library(tidyverse)
setwd("~/tesi/FunModels/data/matrix")
matrPath <- "values.csv"
matr <- read.csv(matrPath)
# To assign a unique name to rows alphabetically
letterwrap <- function(n, depth = 1) {
args <- lapply(1:depth, FUN = function(x) return(letters))
x <- do.call(expand.grid, args = list(args, stringsAsFactors = F))
x <- x[, rev(names(x)), drop = F]
x <- do.call(paste0, x)
if (n <= length(x)) return(x[1:n])
return(c(x, letterwrap(n - length(x), depth = depth + 1)))
}
# Add a column population with the letters
matrLett <- letterwrap(nrow(matr))
matr$population <- matrLett
ff <- matr
lista<- tolower(c("cer", "tul", "ino", "ser", "seb", "rus", "the"))
for(c in lista){
# create the new column and make it a sum of the row for that family
tmp <- matr %>%
mutate(!!c := rowSums(select(., starts_with(c))))
# substitute with 0 or 1
for(i in 1:nrow(tmp)){
if(tmp[i, ncol(tmp)] > 0){
tmp[i, ncol(tmp)] <- 1
}
}
ff <- merge(ff, tmp, all=T)
}
View(ff)
envvar <- c("N", "P", "K", "pH", "MinTemp", "MaxPrec")
keep <- c(lista, envvar, "Orc_species", "lat", "lon")
ff <- select(ff, keep)
View(ff)
# setup
library(tidyverse)
setwd("~/tesi/FunModels/data/matrix")
# path of the original matrix with the values
matrPath <- "values.csv"
outPath <-
# /setup
matr <- read.csv(matrPath)
# To assign a unique name to rows alphabetically
letterwrap <- function(n, depth = 1) {
args <- lapply(1:depth, FUN = function(x) return(letters))
x <- do.call(expand.grid, args = list(args, stringsAsFactors = F))
x <- x[, rev(names(x)), drop = F]
x <- do.call(paste0, x)
if (n <= length(x)) return(x[1:n])
return(c(x, letterwrap(n - length(x), depth = depth + 1)))
}
# Add a column population with the letters
matrLett <- letterwrap(nrow(matr))
matr$population <- matrLett
ff <- matr
lista<- tolower(c("cer", "tul", "ino", "ser", "seb", "rus", "the"))
# here we are creating a new column with a value 0-1 if that family is present in that site
for(c in lista){
# create the new column and make it a sum of the row for that family
tmp <- matr %>%
mutate(!!c := rowSums(select(., starts_with(c))))
# substitute with 0 or 1
for(i in 1:nrow(tmp)){
if(tmp[i, ncol(tmp)] > 0){
tmp[i, ncol(tmp)] <- 1
}
}
ff <- merge(ff, tmp, all=T)
}
# discard all otus
envvar <- c("N", "P", "K", "pH", "MinTemp", "MaxPrec")
keep <- c("Orc_species", "lat", "lon", "population", lista, envvar)
ff <- select(ff, all_of(keep))
View(ff)
write.csv(ff, outPath)
write.csv(outPath, ff)
outPath <- "lump.csv"
write.csv(outPath, ff)
write.csv(ff,outPath)
