library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/")
dataPath <- "lump.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
pc
summary(pc)
png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
dev.off()
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/")
dataPath <- "lump.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top', legend.justification = c(0,0.8))
dev.off()
rm(list=ls())
graphics.off()
library(EpiEstim)
## parametri dell'intervallo seriale stimati da dati di contact tracing lombardi
shape.stimato <- 1.87
rate.stimato <- 0.28
## massimo numero di giorni dell'intervallo seriale
N <- 300
## definisco la distribuzione dell'intervallo seriale
intervallo.seriale <- dgamma(0:N, shape=shape.stimato, rate=rate.stimato)
## normalizzo la distribuzione dell'intervallo seriale in modo che la somma faccia 1
SI <- (intervallo.seriale/sum(intervallo.seriale))
## leggo la curva epidemica da un file con 3 colonne separate da spazi: data, numero di casi trasmessi localmente, numero di casi importati
curva.epidemica <- read.table("curva_epidemica_Italia_2021-01-13")
curva.epidemica[,1] <- as.Date(curva.epidemica[,1])
names(curva.epidemica) <- c("dates", "local", "imported") ## assegno i nomi richiesti dal pacchetto EpiEstim
## calcolo la stima di R applicando la funzione estimate_R del pacchetto EpiEstim
stima <- estimate_R(incid=curva.epidemica, method="non_parametric_si", config = make_config(list(si_distr = SI, n1=10000, mcmc_control=make_mcmc_control(thin=1, burnin=1000000))))
## il pacchetto avvisa che la stima di Rt viene fornita con una media mobile settimanale ("Default config will estimate R on weekly sliding windows"), eventualmente personalizzabile
## avvisa inoltre che la parte iniziale della curva non e' sufficiente alla stima corretta della variabilita' di Rt ("You're estimating R too early in the epidemic to get the desired posterior CV")
###################
### Attenzione! ###
###################
## La stima e' calcolata su tutta la curva epidemica specificata, ma il pacchetto non puo' tenere conto dei ritardi di inserimento nel dato
## Le stime di Rt varieranno man mano che vengono inseriti nuovi casi con data di inizio sintomi indietro nel tempo
## Per questo motivo ISS considera valide le stime fino a 14 giorni prima della data in cui viene effettuata la stima.
## Questo ritardo puo' cambiare nel tempo
## estraggo i risultati di interesse
R.medio <- stima$R$`Mean(R)` ## valore medio
R.lowerCI <- stima$R$`Quantile.0.025(R)` ## estremo inferiore dell'intervallo di confidenza
R.upperCI <- stima$R$`Quantile.0.975(R)` ## estremo superiore dell'intervallo di confidenza
## estraggo le date di riferimento per la stima di R
## la data rappresenta il giorno centrale intorno a cui e' calcolata la media mobile di Rt (con finestra di ampiezza pari a una settimana)
sel.date <- stima$R[, "t_end"]
date <- curva.epidemica[sel.date,1]
## visualizzazione grafica dei risultati
par(mar=c(7,5,1,1))
plot(R.upperCI, type='l', lwd=2, col='gray', axes=FALSE, ylim=c(0, max(R.upperCI)), ylab=expression(R[t]), xlab="")
lines(R.medio, type='l', lwd=3, col='gray20')
lines(R.lowerCI, type='l', lwd=2, col='gray')
axis(1, at=1:length(R.medio), label=date, las=2)
axis(2, las=2)
rm(list=ls())
graphics.off()
library(EpiEstim)
## parametri dell'intervallo seriale stimati da dati di contact tracing lombardi
shape.stimato <- 1.87
rate.stimato <- 0.28
## massimo numero di giorni dell'intervallo seriale
N <- 300
## definisco la distribuzione dell'intervallo seriale
intervallo.seriale <- dgamma(0:N, shape=shape.stimato, rate=rate.stimato)
## normalizzo la distribuzione dell'intervallo seriale in modo che la somma faccia 1
SI <- (intervallo.seriale/sum(intervallo.seriale))
curva.epidemica <- read.table("curva_epidemica_Italia_2021-01-13")
setwd("/home/tombom/Computer/rt/calcolo_Rt_Italia/")
curva.epidemica <- read.table("curva_epidemica_Italia_2021-01-13")
curva.epidemica[,1] <- as.Date(curva.epidemica[,1])
names(curva.epidemica) <- c("dates", "local", "imported") ## assegno i nomi richiesti dal pacchetto EpiEstim
## calcolo la stima di R applicando la funzione estimate_R del pacchetto EpiEstim
stima <- estimate_R(incid=curva.epidemica, method="non_parametric_si", config = make_config(list(si_distr = SI, n1=10000, mcmc_control=make_mcmc_control(thin=1, burnin=1000000))))
## estraggo i risultati di interesse
R.medio <- stima$R$`Mean(R)` ## valore medio
R.lowerCI <- stima$R$`Quantile.0.025(R)` ## estremo inferiore dell'intervallo di confidenza
R.upperCI <- stima$R$`Quantile.0.975(R)` ## estremo superiore dell'intervallo di confidenza
## estraggo le date di riferimento per la stima di R
## la data rappresenta il giorno centrale intorno a cui e' calcolata la media mobile di Rt (con finestra di ampiezza pari a una settimana)
sel.date <- stima$R[, "t_end"]
date <- curva.epidemica[sel.date,1]
## visualizzazione grafica dei risultati
par(mar=c(7,5,1,1))
plot(R.upperCI, type='l', lwd=2, col='gray', axes=FALSE, ylim=c(0, max(R.upperCI)), ylab=expression(R[t]), xlab="")
lines(R.medio, type='l', lwd=3, col='gray20')
lines(R.lowerCI, type='l', lwd=2, col='gray')
axis(1, at=1:length(R.medio), label=date, las=2)
axis(2, las=2)
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/")
dataPath <- "lump.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top', legend.justification = c(0,0.8))
dev.off()
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/")
dataPath <- "lump.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top', legend.justification = c(0,0.8))+
guide_legend(nrow=6)
dev.off()
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/")
dataPath <- "lump.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'vertical', legend.position = 'top', legend.justification = c(0,0.8))
dev.off()
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/")
dataPath <- "lump.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
#dev.off()
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split/")
# /SETTINGS
# loop all the csv files and perform the pca
files <- list.files(".", pattern = "*.csv")
for(f in files){
name <- substr(f, 1,3)
dataPath <- f
plotOut <- paste(name, ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
pc
summary(pc)
png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
dev.off()
}
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split/")
# /SETTINGS
# loop all the csv files and perform the pca
files <- list.files(".", pattern = "*.csv")
for(f in files){
name <- substr(f, 1,3)
dataPath <- f
plotOut <- paste(name, ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
pc
summary(pc)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
#dev.off()
}
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/split")
dataPath <- "cer.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
#dev.off()
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/split")
dataPath <- "cer.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
#dev.off()
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/")
dataPath <- "lump.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
summary(pc)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
#dev.off()
