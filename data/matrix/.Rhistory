#  data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
#}
# Distance Matrix
#dataDist <-
#  vegdist(dataDist, method = "euclidean", na.rm=T)
#dataDist <-
#  as.matrix(dataDist, labels = T, na.rm=T)
#dataDist
# NMDS
dataMDS <-
metaMDS(dataDist,
distance = "euclidean",
k = 3,
maxit = 999,
trymax = 500,
na.rm=T)
dataMDS
stressplot(dataMDS)
# plot 02
grp <-data[,1]
datascores <- as.data.frame(scores(dataMDS))
scores <- cbind(as.data.frame(datascores), Orchid = grp)
centroids <- aggregate(cbind(NMDS1, NMDS2) ~ Orchid, data = scores, FUN = mean)
seg <- merge(scores, setNames(centroids, c('Orchid','oNMDS1','oNMDS2')),
by = 'Orchid', sort = FALSE)
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = Orchid)) +
geom_segment(data = seg,
mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
theme(legend.position="right",legend.text=element_text(size=10),legend.direction='vertical')+
ggtitle(outTitle)
# adds encircle
#  geom_path(size=1, linetype=2)
# annotate("text",x=NMDS.mean$MDS1,y=NMDS.mean$MDS2,label=NMDS.mean$group)
# settings
library(vegan)
library(tidyverse)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "ser.csv"
#outPath <- "lump.jpg" # output graph
outTitle <- "Serendipitaceae"
# /settings
data <- read.csv(dataPath)
# Read in species matrix AND grouping variables
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
# standardize the data. Skip in case of negative values
# dataRel <- decostand(data, method = "total")
# to avoid missing too many rows with na.rm, replace NAs with the mean of the column. We'd lose about 1/3 of the data otherwise
#for(i in 1:ncol(data)){
#  data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
#}
# Distance Matrix
#dataDist <-
#  vegdist(dataDist, method = "euclidean", na.rm=T)
#dataDist <-
#  as.matrix(dataDist, labels = T, na.rm=T)
#dataDist
# NMDS
dataMDS <-
metaMDS(dataDist,
distance = "euclidean",
k = 3,
maxit = 999,
trymax = 500,
na.rm=T)
dataMDS
stressplot(dataMDS)
# plot 02
grp <-data[,1]
datascores <- as.data.frame(scores(dataMDS))
scores <- cbind(as.data.frame(datascores), Orchid = grp)
centroids <- aggregate(cbind(NMDS1, NMDS2) ~ Orchid, data = scores, FUN = mean)
seg <- merge(scores, setNames(centroids, c('Orchid','oNMDS1','oNMDS2')),
by = 'Orchid', sort = FALSE)
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = Orchid)) +
geom_segment(data = seg,
mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
theme(legend.position="right",legend.text=element_text(size=10),legend.direction='vertical')+
ggtitle(outTitle)
# adds encircle
#  geom_path(size=1, linetype=2)
# annotate("text",x=NMDS.mean$MDS1,y=NMDS.mean$MDS2,label=NMDS.mean$group)
# settings
library(vegan)
library(tidyverse)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "the.csv"
#outPath <- "lump.jpg" # output graph
outTitle <- "Theleophoraceae"
# /settings
data <- read.csv(dataPath)
# Read in species matrix AND grouping variables
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
# standardize the data. Skip in case of negative values
# dataRel <- decostand(data, method = "total")
# to avoid missing too many rows with na.rm, replace NAs with the mean of the column. We'd lose about 1/3 of the data otherwise
#for(i in 1:ncol(data)){
#  data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
#}
# Distance Matrix
#dataDist <-
#  vegdist(dataDist, method = "euclidean", na.rm=T)
#dataDist <-
#  as.matrix(dataDist, labels = T, na.rm=T)
#dataDist
# NMDS
dataMDS <-
metaMDS(dataDist,
distance = "euclidean",
k = 3,
maxit = 999,
trymax = 500,
na.rm=T)
dataMDS
stressplot(dataMDS)
# plot 02
grp <-data[,1]
datascores <- as.data.frame(scores(dataMDS))
scores <- cbind(as.data.frame(datascores), Orchid = grp)
centroids <- aggregate(cbind(NMDS1, NMDS2) ~ Orchid, data = scores, FUN = mean)
seg <- merge(scores, setNames(centroids, c('Orchid','oNMDS1','oNMDS2')),
by = 'Orchid', sort = FALSE)
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = Orchid)) +
geom_segment(data = seg,
mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
theme(legend.position="right",legend.text=element_text(size=10),legend.direction='vertical')+
ggtitle(outTitle)
# adds encircle
#  geom_path(size=1, linetype=2)
# annotate("text",x=NMDS.mean$MDS1,y=NMDS.mean$MDS2,label=NMDS.mean$group)
# settings
library(vegan)
library(tidyverse)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "tul.csv"
#outPath <- "lump.jpg" # output graph
outTitle <- "Tulasnellaceae"
# /settings
data <- read.csv(dataPath)
# Read in species matrix AND grouping variables
dataDist <- select(data, -c("lat","lon","Orc_species", "population"))
# standardize the data. Skip in case of negative values
# dataRel <- decostand(data, method = "total")
# to avoid missing too many rows with na.rm, replace NAs with the mean of the column. We'd lose about 1/3 of the data otherwise
#for(i in 1:ncol(data)){
#  data[is.na(data[,i]), i] <- mean(data[,i], na.rm = TRUE)
#}
# Distance Matrix
#dataDist <-
#  vegdist(dataDist, method = "euclidean", na.rm=T)
#dataDist <-
#  as.matrix(dataDist, labels = T, na.rm=T)
#dataDist
# NMDS
dataMDS <-
metaMDS(dataDist,
distance = "euclidean",
k = 3,
maxit = 999,
trymax = 500,
na.rm=T)
dataMDS
stressplot(dataMDS)
# plot 02
grp <-data[,1]
datascores <- as.data.frame(scores(dataMDS))
scores <- cbind(as.data.frame(datascores), Orchid = grp)
centroids <- aggregate(cbind(NMDS1, NMDS2) ~ Orchid, data = scores, FUN = mean)
seg <- merge(scores, setNames(centroids, c('Orchid','oNMDS1','oNMDS2')),
by = 'Orchid', sort = FALSE)
ggplot(scores, aes(x = NMDS1, y = NMDS2, colour = Orchid)) +
geom_segment(data = seg,
mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # add spiders
geom_point(data = centroids, size = 4) +                    # add centroids
geom_point() +
coord_fixed()+
theme_bw()+
theme(legend.position="right",legend.text=element_text(size=10),legend.direction='vertical')+
ggtitle(outTitle)
# adds encircle
#  geom_path(size=1, linetype=2)
# annotate("text",x=NMDS.mean$MDS1,y=NMDS.mean$MDS2,label=NMDS.mean$group)
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "cer.csv"
outTitle="Ceratobasidiaceae"
# /SETTINGS
# loop all the csv files and perform the pca
plotOut <- paste(name, ".png", sep="")
name <- substr(dataPath, 1,3)
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
#dev.off()
#ggsave(plotOut)
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "ino.csv"
outTitle="Inocybaceae"
# /SETTINGS
# loop all the csv files and perform the pca
plotOut <- paste(name, ".png", sep="")
name <- substr(dataPath, 1,3)
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
#dev.off()
#ggsave(plotOut)
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "rus.csv"
outTitle="Russulaceae"
# /SETTINGS
# loop all the csv files and perform the pca
plotOut <- paste(name, ".png", sep="")
name <- substr(dataPath, 1,3)
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
#dev.off()
#ggsave(plotOut)
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "seb.csv"
outTitle="Sebacinaceae"
# /SETTINGS
# loop all the csv files and perform the pca
plotOut <- paste(name, ".png", sep="")
name <- substr(dataPath, 1,3)
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
#dev.off()
#ggsave(plotOut)
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "ser.csv"
outTitle="Serendipitaceae"
# /SETTINGS
# loop all the csv files and perform the pca
plotOut <- paste(name, ".png", sep="")
name <- substr(dataPath, 1,3)
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
#dev.off()
#ggsave(plotOut)
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "the.csv"
outTitle="Theleophoraceae"
# /SETTINGS
# loop all the csv files and perform the pca
plotOut <- paste(name, ".png", sep="")
name <- substr(dataPath, 1,3)
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
#dev.off()
#ggsave(plotOut)
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/split/")
dataPath <- "tul.csv"
outTitle="Tulasnellaceae"
# /SETTINGS
# loop all the csv files and perform the pca
plotOut <- paste(name, ".png", sep="")
name <- substr(dataPath, 1,3)
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
#dev.off()
#ggsave(plotOut)
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
# SETTINGS
setwd("~/tesi/FunModels/data/matrix/")
dataPath <- "lump.csv"
plotOut <- paste(substr(dataPath, 1,3), ".png", sep="")
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
#if (length(nearZeroVar(dataDist)) > 0) {
#  dataDist <- dataDist[, -nearZeroVar(dataDist)]
#}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-2],center = T,scale. = T)
summary(pc)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle("Lumped matrix")
#dev.off()
#!/usr/bin/env Rscript
# SETTINGS
library(vegan)
library(tidyverse)
library(psych)
library(caret)
library(ggbiplot)
setwd("~/tesi/FunModels/data/matrix/")
dataPath <- "lump.csv"
outTitle="Lumped matrix"
# /SETTINGS
# loop all the csv files and perform the pca
plotOut <- paste(name, ".png", sep="")
name <- substr(dataPath, 1,3)
# /SETTINGS
data <- read.csv(dataPath)
dataDist <- select(data, -c("lat","lon","population")) %>%
na.omit()
# remove columns without variance
if (length(nearZeroVar(dataDist)) > 0) {
dataDist <- dataDist[, -nearZeroVar(dataDist)]
}
# partition the data set into training and testing data sets.
#ind <- createDataPartition(dataDist$Orc_species,p=0.80,list = F)
#train <- dataDist[ind,]
#test <- dataDist[-ind,]
train <- dataDist
pc <- prcomp(train[,-1],center = T,scale. = T)
#png(plotOut)
ggbiplot(pc, obs.scale = 1, var.scale = 1,
groups = train$Orc_species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')+
ggtitle(outTitle)
#dev.off()
#ggsave(plotOut)
